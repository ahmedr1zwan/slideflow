// /Users/keviny/Documents/GitHub/slideflow/src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import "./output.css";
import { BrowserRouter } from 'react-router-dom';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
    <BrowserRouter>
        <React.StrictMode>
            <App />
        </React.StrictMode>
    </BrowserRouter>
);

// /Users/keviny/Documents/GitHub/slideflow/src/Layout.tsx
import React from 'react'
import { Outlet } from 'react-router-dom'

export const Layout = () => {
    return (

        <div>
            <p>
                this is the layout
            </p>
            <Outlet />
        </div>
    )
}


// /Users/keviny/Documents/GitHub/slideflow/src/App.js
import React from 'react'
import "./output.css";
import { Layout } from './Layout.tsx';
import { LandingPage } from './pages/LandingPage.tsx';
import { Route, Routes } from 'react-router-dom';

const App = () => {
    return (
        <Routes>
            <Route path="/" element={<Layout />} >
                <Route index element={<LandingPage />} />
            </Route>
        </Routes>
    )
}

export default App

// /Users/keviny/Documents/GitHub/slideflow/src/components/PDFContext.tsx
// /src/contexts/PDFContext.jsx
import React, { createContext, useContext, ReactNode } from 'react';

const PDFContext = createContext();

interface PDFProviderProps {
    pluginHandle: any;
    children: ReactNode;
}

export const usePDF = () => useContext(PDFContext);

export const PDFProvider = ({ children, pluginHandle }) => {
    // Navigation Methods using pluginHandle
    const goToNextPage = () => {
        if (pluginHandle && pluginHandle.current) {
            pluginHandle.current.nextPage();
        }
    };

    const goToPrevPage = () => {
        if (pluginHandle && pluginHandle.current) {
            pluginHandle.current.previousPage();
        }
    };

    const goToFirstPage = () => {
        if (pluginHandle && pluginHandle.current) {
            pluginHandle.current.jumpToPage(1);
        }
    };

    const goToLastPage = () => {
        if (pluginHandle && pluginHandle.current) {
            pluginHandle.current.jumpToPage(pluginHandle.current.getPagesCount());
        }
    };

    const goToPage = (pageNumber) => {
        if (pluginHandle && pluginHandle.current) {
            pluginHandle.current.jumpToPage(pageNumber);
        }
    };

    const value = {
        goToNextPage,
        goToPrevPage,
        goToFirstPage,
        goToLastPage,
        goToPage,
    };

    return (
        <PDFContext.Provider value={value}>
            {children}
        </PDFContext.Provider>
    );
};


// /Users/keviny/Documents/GitHub/slideflow/src/components/PDFViewerComponent.jsx
// /src/components/PDFViewerComponent.jsx
import { useState } from 'react';
import { Worker, Viewer } from '@react-pdf-viewer/core';
import '@react-pdf-viewer/core/lib/styles/index.css';
// import { defaultLayoutPlugin } from '@react-pdf-viewer/default-layout';
import '@react-pdf-viewer/default-layout/lib/styles/index.css';

function PDFViewerComponent({ plugin }) {
    // // Initialize the defaultLayoutPlugin
    // const defaultLayoutPluginInstance = defaultLayoutPlugin();

    // State for PDF file and errors
    const [pdfFile, setPdfFile] = useState(null);
    const [pdfError, setPdfError] = useState('');

    // Handle file selection
    const allowedFiles = ['application/pdf'];
    const handleFile = (e) => {
        let selectedFile = e.target.files[0];
        if (selectedFile) {
            if (allowedFiles.includes(selectedFile.type)) {
                let reader = new FileReader();
                reader.readAsDataURL(selectedFile);
                reader.onloadend = (e) => {
                    setPdfError('');
                    setPdfFile(e.target.result);
                };
            } else {
                setPdfError('Not a valid PDF: Please select only PDF');
                setPdfFile('');
            }
        } else {
            console.log('Please select a PDF');
        }
    };

    return (
        <div className="container">
            <form>
                <label><h5>Upload PDF</h5></label>
                <br />
                <input type='file' className="form-control" onChange={handleFile} />
                {pdfError && <span className='text-danger'>{pdfError}</span>}
            </form>

            <h5>View PDF</h5>
            <div className="viewer" style={{ border: '1px solid rgba(0, 0, 0, 0.3)', height: '750px' }}>
                {pdfFile ? (
                    <Worker workerUrl="https://unpkg.com/pdfjs-dist@3.4.120/build/pdf.worker.min.js">
                        <Viewer fileUrl={pdfFile} plugins={[plugin]} />
                    </Worker>
                ) : (
                    <>No file is selected yet</>
                )}
            </div>
        </div>
    );
}

export default PDFViewerComponent;


// /Users/keviny/Documents/GitHub/slideflow/src/components/SpeechRecognition.tsx
import React, { useState, useRef, useEffect } from 'react';
import { usePDF } from './PDFContext.tsx';

const SpeechRecognition = () => {
  const [transcript, setTranscript] = useState('');
  const [listening, setListening] = useState(false);
  const recognitionRef = useRef(null);
  const pdf = usePDF();
  // TODO: Consider defining a variable that keeps track of the transcript from beginning to now

  const commandPatterns = [
    /next slide$/i,
    /previous slide$/i,
    /go to( the)? first slide$/i,
    /go to( the)? last slide$/i,
    /go to the slide with the (.+)$/i,
    /go to the slide titled (.+)$/i,
    /search for (.+)$/i,
  ];

  document.addEventListener('keydown', function (e) {
    console.log(
      'keyCodeDEP', e.which,
      'key', e.key,
      'code', e.code,
      'location', e.location
    );
  });
  const simulateKeyPress = ({
    key,
    code,
    keyCode,
    which,
    ctrlKey = false,
    altKey = false,
    shiftKey = false,
    metaKey = false,
  }) => {
    const eventInit = {
      key,
      code,
      keyCode,
      which,
      ctrlKey,
      altKey,
      shiftKey,
      metaKey,
      bubbles: true,
      cancelable: true,
    };

    // You can consider implementing the logic here but there is really no need to do so

  };

  useEffect(() => {
    // Check if the browser supports SpeechRecognition
    const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;
    if (!SpeechRecognition) {
      alert('Your browser does not support SpeechRecognition. Try Chrome or Edge.');
      return;
    }

    // Create a new recognition instance
    const recognition = new SpeechRecognition();
    recognition.lang = 'en-US';
    recognition.continuous = true;     // Keep capturing speech until stopped
    recognition.interimResults = true; // Show interim transcripts

    // Handle the result event
    recognition.onresult = (event) => {
      let interimTranscript = '';
      let finalTranscript = '';

      // Loop through the results
      for (let i = event.resultIndex; i < event.results.length; i++) {
        const transcriptSegment = event.results[i][0].transcript;
        if (event.results[i].isFinal) {
          finalTranscript += transcriptSegment;
          // TODO: The "finalTranscript" sometimes is cut off in the middle so commands are not captured
          // Potential Solution: Create a variable that keeps track of ALL the speech so far, and check the last 20 words or so

          for (const pattern of commandPatterns) {
            const match = finalTranscript.match(pattern);
            console.log(finalTranscript + " did (not?) match to " + pattern);
            if (match) {
              const command = pattern.source;
              const parameter = match[1] || null;
              // Handle the command accordingly
              console.log(`Command: ${command}`, parameter ? `Parameter: ${parameter}` : '');

              // TODO: Implement Corresponding behaviour based on the command
              // "next slide" -> the down key in the embedded PDF
              // "previous slide" -> the up key in the embedded PDF
              // "go to the first slide" -> 1 + Enter in the embedded PDF
              // "go to the last slide" -> will require calculating the n, + enter in the embedded PDF
              // "go to the slide with the (.+)" -> will search through the slide, find the number + enter in the embedded PDF

              break;
            }
          }
        } else {
          interimTranscript += transcriptSegment;
        }
      }

      // Update the state with whatever is available (final or interim)
      setTranscript(finalTranscript || interimTranscript);
    };

    // Inform the user that the recognition has started
    recognition.onstart = () => {
      console.log('Speech recognition started');
    };

    // Handle errors
    recognition.onerror = (event) => {
      console.error('Speech recognition error', event.error);
    };

    // When recognition ends (automatically or via stop), update state
    recognition.onend = () => {
      console.log('Speech recognition ended');
      setListening(false);
    };

    // Store the recognition instance in a ref so we can start/stop it later
    recognitionRef.current = recognition;
  }, []);

  // Start recognition
  const handleStart = () => {
    if (recognitionRef.current && !listening) {
      recognitionRef.current.start();
      setListening(true);
    }
  };

  // Stop recognition
  const handleStop = () => {
    if (recognitionRef.current && listening) {
      recognitionRef.current.stop();
      // The onend event will set listening=false for us
    }
  };

  return (
    <div style={{ padding: '2rem' }} id="speech-recognition">
      <h1 className="text-3xl">Web Speech API in React</h1>
      <div className="flex items-center font-bold">
        <button onClick={handleStart} disabled={listening} className="bg-red-200">
          Start
        </button>
        <button onClick={handleStop} disabled={!listening} className="bg-green-200">
          Stop
        </button>
      </div>

      <p style={{ marginTop: '1rem', fontSize: '1.2rem' }}>
        Transcript: {transcript}
      </p>

    </div>
  );
};

export default SpeechRecognition;

// /Users/keviny/Documents/GitHub/slideflow/src/pages/LandingPage.tsx
import React, { useEffect, useCallback } from 'react';
import SpeechRecognition from '../components/SpeechRecognition.tsx';
import PDFViewerComponent from '../components/PDFViewerComponent.jsx';

// Import both the context and the plugin if needed
import { PDFProvider, usePDF } from '../components/PDFContext.tsx';
import { defaultLayoutPlugin } from '@react-pdf-viewer/default-layout';

export const LandingPage = () => {
    const defaultLayoutPluginInstance = defaultLayoutPlugin();

    const { goToNextPage } = usePDF();

    const handleKeyDown = useCallback((event: KeyboardEvent) => {
        if (event.key === 'ArrowDown') {
            console.log("ArrowDown");
            goToNextPage();
        }
    }, [goToNextPage]);

    useEffect(() => {
        window.addEventListener('keydown', handleKeyDown);
        return () => {
            window.removeEventListener('keydown', handleKeyDown);
        };
    }, [handleKeyDown]);

    return (
        <PDFProvider pluginHandle={defaultLayoutPluginInstance}>
            <div>
                LandingPage
                <SpeechRecognition />
                <PDFViewerComponent plugin={defaultLayoutPluginInstance} />
            </div>
        </PDFProvider>

    )
}
export default LandingPage;

